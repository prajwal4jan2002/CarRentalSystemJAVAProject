import java.util.ArrayList;
import java.util.Scanner;


 class Car {
    private String carId; //encapsulation
    private String brand;
    private String model;
    private double basePricePerDay;
    private boolean isAvailable;

    public Car(String carId,String brand,String model,double basePricePerDay){
        this.carId=carId;
        this.brand=brand;
        this.model=model;
        this.basePricePerDay=basePricePerDay;
        this.isAvailable=true;
    }

    public String getCarId(){
        return carId;
    }

    public String getBrand(){
        return brand;
    }

    public String getModel(){
        return model;
    }

    public double calculatePrice(int rentalDays){
        return basePricePerDay*rentalDays;
    }

    public boolean isAvailable(){
        return isAvailable;
    }

    public void rent(){
        isAvailable=false;
    }

    public void returnCar(){
        isAvailable=true;
    }
}


class Customer{
    private String customerId;
    private String name;

    public Customer(String customerId,String name){
        this.customerId=customerId;
        this.name=name;
    }

    public String getCustomerId(){
        return customerId;
    }

    public String getName(){
        return name;
    }
}


class Rental {
    private Car car;
    private Customer customer;
    private int days;

    public Rental(Car car, Customer customer, int days) {
        this.car = car;
        this.customer = customer;
        this.days=days;
    }

    public Car getCar(){
        return car;
    }

    public Customer getCustomer(){
        return customer;
    }

    public int getDays(){
        return days;
    }
}

class CarRentalSystem{
    private ArrayList<Car> cars;//arraylist is formed for cars ,customers,rentals
    private ArrayList<Customer> customers;
    private ArrayList<Rental> rentals;

    public CarRentalSystem(){
        cars=new ArrayList<>();
        customers=new ArrayList<>();
        rentals=new ArrayList<>();
    }

    public void addCar(Car car){
        cars.add(car);
    }

    public void addCustomers(Customer customer){
        customers.add(customer);
    }

    public void rentCar(Car car,Customer customer,int days){
        if(car.isAvailable()){
            car.rent();
            rentals.add(new Rental(car,customer,days));
        }
        else{
            System.out.println("car is not avalible for rent");
        }
    }

    public void returnCar(Car car){
        car.returnCar();//now car avaliable to return
       Rental rentalToRemove=null;
       for(Rental rental:rentals){
           if(rental.getCar()==car){
               rentalToRemove=rental;
               break;
           }
       }

       if(rentalToRemove!=null){
           rentals.remove(rentalToRemove);//remove the car data from rentals arraylist
           System.out.println("car returned successfully");
       }
       else{
           System.out.println("car was not rented");
       }
    }

    public void menu(){
        Scanner sc=new Scanner(System.in);

        while(true) {
            System.out.println("==Welcome to CAR RENTAL SYSTEM ==");
            System.out.println("1. Rent a car");
            System.out.println("2. Return a car");
            System.out.println("3. Exit");
            System.out.println("enter your choice");

            int choice=sc.nextInt();
            sc.nextLine();//consume new line

            if(choice==1) {
                System.out.println("== Rent a Car==");
                System.out.println("enter your name");
                String customerName = sc.nextLine();
                System.out.println("/n Avaliable Cars:");

                for (Car car : cars) {
                    if (car.isAvailable()) {

                        System.out.println(car.getCarId() + "--" + car.getBrand() + "--" + car.getModel());
                    }
                }
                System.out.println("\n enter the car id you wants to rental;");
                String carId = sc.nextLine();

                System.out.println("enter the number of days for rental:");
                int rentalDays = sc.nextInt();
                sc.nextLine();

                Customer newCustomer = new Customer("cus" + (customers.size() + 1), customerName);//ch
                addCustomers(newCustomer);//ch

                Car selectedCar = null;
                for (Car car : cars) {
                    if (car.getCarId().equals(carId) && car.isAvailable()) {
                        selectedCar = car;
                        break;
                    }

                }
                if (selectedCar != null) {
                    double totalPrice = selectedCar.calculatePrice(rentalDays);
                    System.out.println("\n ==nRental Information ==\n");

                    System.out.println("Customer Id:" + newCustomer.getCustomerId());
                    System.out.println("Customer name:" + newCustomer.getName());
                    System.out.println("Car" + selectedCar.getBrand() + " " + selectedCar.getModel());
                    System.out.println("Rental days" + rentalDays);
                    System.out.println("Total price" + totalPrice);
                    System.out.println("\n Confirm rental (Yes/No)");


                    String confirm = sc.nextLine();

                    if (confirm.equalsIgnoreCase("Yes")) {
                        rentCar(selectedCar, newCustomer, rentalDays);
                        System.out.println("\n Car rented successfully");
                    } else {
                        System.out.println("\n Rental cancelled");
                    }
                } else {
                    System.out.println("\n invalid car selection or Car not avaliable for rent");
                }
            }//cuttd
            else if (choice == 2) {
                System.out.println("\n== Return a Car ==\n");
                System.out.print("Enter the car ID you want to return: ");
                String carId = sc.nextLine();

                Car carToReturn = null;
                for (Car car : cars) {
                    if (car.getCarId().equals(carId) && !car.isAvailable()) {
                        carToReturn = car;
                        break;
                    }
                }

                if (carToReturn != null) {
                    Customer customer = null;
                    for (Rental rental : rentals) {
                        if (rental.getCar() == carToReturn) {
                            customer = rental.getCustomer();
                            break;
                        }
                    }

                    if (customer != null) {
                        returnCar(carToReturn);
                        System.out.println("Car returned successfully by " + customer.getName());
                    } else {
                        System.out.println("Car was not rented or rental information is missing.");
                    }
                } else {
                    System.out.println("Invalid car ID or car is not rented.");
                }
            }


                else if(choice==3){
                    break;
                }
                else{
                    System.out.println("valid choice, please enter valid option");
                }

            }
            System.out.println("Thanks for using Car rental System");
        }
    }





class Mains{
    public static void main(String[] args) {
        CarRentalSystem rentalSystem=new CarRentalSystem();

        Car car1=new Car("C001","Mahindra","Thar",800);
        Car car2=new Car("C002","TATA","Safari",1000);
        Car car3=new Car("C003","Suzuki","Swift",600);

        rentalSystem.addCar(car1);
        rentalSystem.addCar(car2);
        rentalSystem.addCar(car3);

        rentalSystem.menu();
    }
}